template: true
valuesFilePath: ./values.yml

resources:
  - name: git_repo
    type: GitRepo
    configuration:
      path: {{ .Values.repoPath }}
      gitProvider: {{ .Values.gitProvider }}

  - name: mvn_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.artifactory.name }}

  - name: docker_resources
    type: FileSpec
    configuration:
      sourceArtifactory: {{ .Values.artifactory.name }}
      pattern: {{ .Values.artifactory.snapshotRepo }}/*.jar

pipelines:

  - name: demo_maven
    steps:
      - name: mvn_package
        type: MvnBuild
        configuration:
          affinityGroup: build
          mvnCommand: clean install -DskipTests -Pcicd -Dstash_dir=$shared_workspace
          deployerSnapshotRepo: {{ .Values.snapshotRepo }}
          deployerReleaseRepo: {{ .Values.releaseRepo }}
#          configFileLocation: .jfrog-pipelines/config
#          configFileName: settings.xml
#          sourceLocation: .
          inputResources:
            - name: git_repo
          integrations:
            - name: {{ .Values.artifactory.name }}
#        execution:
#          onSuccess:
#            - echo "Done building JAR"
#            - pushd $step_dependency_state_dir/resources/git_repo/target
#            - ls -lath
#            - ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
#            - popd
#            - mkdir $shared_workspace/target
#            - cp -r $step_dependency_state_dir/resources/git_repo/target $shared_workspace
#            - ls -lath $shared_workspace/target

      - name: publish_mvn_build
        type: PublishBuildInfo
        configuration:
          affinityGroup: build
          forceXrayScan: false
          inputSteps:
            - name: mvn_package
          outputResources:
            - name: mvn_build_info

      - name: security_scan
        type: XrayScan
        configuration:
          affinityGroup: build
          failOnScan: false
          inputResources:
            - name: mvn_build_info

      - name: mvn_test
        type: MvnBuild
        configuration:
          affinityGroup: build
          mvnCommand: test
          deployerSnapshotRepo: {{ .Values.snapshotRepo }}
          deployerReleaseRepo: {{ .Values.releaseRepo }}
#          configFileLocation: .jfrog-pipelines/config/settings.xml
#          sourceLocation: .
          inputResources:
            - name: git_repo
          integrations:
            - name: {{ .Values.artifactory.name }}
          inputSteps:
            - name: security_scan
        execution:
          onStart:
            - echo "Restoring target directory"
            - cp -r $shared_workspace/target $step_dependency_state_dir/resources/git_repo
            - ls -lath $step_dependency_state_dir/resources/git_repo

      - name: build_oci_image
        type: MvnBuild
        configuration:
          affinityGroup: build
          mvnCommand: spring-boot:build-image
          deployerSnapshotRepo: {{ .Values.snapshotRepo }}
          deployerReleaseRepo: {{ .Values.releaseRepo }}
          inputResources:
            - name: git_repo
          integrations:
            - name: {{ .Values.artifactory.name }}
          inputSteps:
            - name: mvn_test
        execution:
          onStart:
            - echo "Restoring target directory"
            - cp -r $shared_workspace/target $step_dependency_state_dir/resources/git_repo
            - ls -lath $step_dependency_state_dir/resources/git_repo

#      - name: build_docker_image
#        type: DockerBuild
#        configuration:
#          affinityGroup: build
#          dockerFileLocation: .
#          dockerFileName: Dockerfile
#          dockerImageName: {{ .Values.docker.imageName }}
#          dockerImageTag: ${run_number}
#          dockerOptions: --build-arg TARGET_DIR=${shared_workspace}
#          inputSteps:
#            - name: mvn_test
#          inputResources:
#            - name: git_repo
#          integrations:
#            - name: {{ .Values.artifactory.name }}
#        execution:
#          onStart:
#            - pushd $shared_workspace
#            - ls -lath $shared_workspace
#            - ls -lath $shared_workspace/target
#            - ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
#            - ls -lath target
#            - popd


#      - name: push_docker_image
#        type: DockerPush
#        configuration:
#          affinityGroup: build
#          forceXrayScan: true
#          integrations:
#            - name: {{ .Values.artifactory.name }}
#          inputSteps:
#            - name: build_docker_image


#
#      - name: publish_docker_build
#        type: PublishBuildInfo
#        configuration:
#          affinityGroup: build
#          forceXrayScan: false
#          inputSteps:
#            - name: push_docker_image
#          outputResources:
#            - name: docker_build_info