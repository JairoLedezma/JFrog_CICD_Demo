template: true
valuesFilePath: ./values.yml

resources:
  - name: git_repo
    type: GitRepo
    configuration:
      path: {{ .Values.repoPath }}
      gitProvider: {{ .Values.gitProvider }}

  - name: mvn_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.artifactory.name }}


pipelines:

  - name: demo_maven
    steps:
      - name: mvn_package
        type: MvnBuild
        configuration:
          affinityGroup: build
          mvnCommand: clean package -DskipTests
          deployerSnapshotRepo: {{ .Values.snapshotRepo }}
          deployerReleaseRepo: {{ .Values.releaseRepo }}
#          configFileLocation: .jfrog-pipelines/config
#          configFileName: settings.xml
#          sourceLocation: .
          inputResources:
            - name: git_repo
          integrations:
            - name: {{ .Values.artifactory.name }}
#        execution:
#          onStart:
#            - echo $step_tmp_dir
#            - ls $step_tmp_dir
#            - ls "/var/opt/jfrog/pipelines/data/$pipeline_name/runs/$run_number/steps/$step_name/$step_id"
#
#          onSuccess:
#            - echo "Done building JAR"
#            - ls $step_tmp_dir
#            - ls "/var/opt/jfrog/pipelines/data/$pipeline_name/runs/$run_number/steps/$step_name/$step_id"
#            - add_run_files $step_tmp_dir/target target
#            - mkdir $shared_workspace/target
#            - cp -r $(pwd)/target/* $shared_workspace/target

      - name: test
        type: Bash
        configuration:
          inputSteps:
            - name: mvn_package
        execution:
          onExecute:
            - mkdir tmp
            - restore_run_files jfrog tmp
            - ls tmp
            - pwd

      - name: publish_mvn_build
        type: PublishBuildInfo
        configuration:
          affinityGroup: build
          forceXrayScan: false
          inputSteps:
            - name: mvn_package
          outputResources:
            - name: mvn_build_info

      - name: security_scan
        type: XrayScan
        configuration:
          affinityGroup: build
          failOnScan: false
          inputResources:
            - name: mvn_build_info

      - name: mvn_test
        type: MvnBuild
        configuration:
          affinityGroup: build
          mvnCommand: test
          deployerSnapshotRepo: {{ .Values.snapshotRepo }}
          deployerReleaseRepo: {{ .Values.releaseRepo }}
#          configFileLocation: .jfrog-pipelines/config/settings.xml
#          sourceLocation: .
          inputResources:
            - name: git_repo
          integrations:
            - name: {{ .Values.artifactory.name }}
          inputSteps:
            - name: security_scan
        execution:
          onStart:
            - echo "Restoring target directory"
            - mkdir ./target
            - restore_run_files target $step_tmp_dir/target
#            - cp -r $shared_workspace/target/* ./target


      - name: build_docker_image
        type: DockerBuild
        configuration:
          affinityGroup: build
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: {{ .Values.docker.imageName }}
          dockerImageTag: ${run_number}
          inputSteps:
            - name: mvn_test
          inputResources:
            - name: git_repo
          integrations:
            - name: {{ .Values.artifactory.name }}
        execution:
          onStart:
            - echo "Restoring target directory"
            - mkdir ./target
            - restore_run_files target $step_tmp_dir/target

      - name: push_docker_image
        type: DockerPush
        configuration:
          affinityGroup: build
          forceXrayScan: true
          integrations:
            - name: {{ .Values.artifactory.name }}
          inputSteps:
            - name: build_docker_image

#
#      - name: publish_docker_build
#        type: PublishBuildInfo
#        configuration:
#          affinityGroup: build
#          forceXrayScan: false
#          inputSteps:
#            - name: push_docker_image
#          outputResources:
#            - name: docker_build_info